package mysticmods.roots.api.reference;

import net.minecraft.block.Block;
import net.minecraft.util.math.shapes.VoxelShape;
import noobanidus.libs.noobutil.util.VoxelUtil;

public interface Shapes {
  VoxelShape FEY_LIGHT = Block.box(6, 6, 6, 10, 10, 10);
  VoxelShape FEY_CRAFTER = VoxelUtil.multiOr(Block.box(2, 0, 2, 14, 2, 14), Block.box(5, 2, 5, 11, 4, 11), Block.box(6, 4, 6, 10, 10, 10), Block.box(7, 10, 7, 10, 13, 10), Block.box(12, 13, 5, 16, 16, 9), Block.box(6, 14, 0, 10, 17, 4), Block.box(9, 14, 12, 13, 17, 16), Block.box(2, 14, 12, 6, 17, 16), Block.box(0, 13, 5, 4, 16, 9), Block.box(7, 2, 11, 9, 4, 12), Block.box(7, 4, 10, 9, 6, 11), Block.box(7, 4, 5, 9, 6, 6), Block.box(7, 2, 4, 9, 4, 5), Block.box(8, 8, 5, 9, 10, 6), Block.box(8, 10, 4, 9, 12, 5), Block.box(8, 12, 3, 9, 14, 4), Block.box(10, 10, 7, 11, 12, 8), Block.box(11, 11, 7, 12, 13, 8), Block.box(12, 12, 7, 13, 13, 8), Block.box(9, 12, 10, 10, 13, 11), Block.box(9, 13, 11, 10, 14, 13), Block.box(5, 10, 7, 7, 11, 8), Block.box(4, 11, 7, 5, 12, 8), Block.box(3, 12, 7, 4, 13, 8), Block.box(5.5, 9, 9.5, 6.5, 11, 10.5), Block.box(5.5, 11, 10.5, 6.5, 13, 11.5), Block.box(5.5, 13, 11.5, 6.5, 15, 12.5));
  VoxelShape CATALYST_PLATE = VoxelUtil.multiOr(Block.box(4, 0, 4, 12, 11, 12), Block.box(3, 0, 3, 6, 10, 6), Block.box(3, 0, 10, 6, 12, 13), Block.box(10, 0, 3, 13, 10, 6), Block.box(10, 0, 10, 13, 12, 13), Block.box(2, 8, 2, 14, 11, 5), Block.box(2, 9, 5, 14, 12, 8), Block.box(2, 10, 8, 14, 13, 11), Block.box(2, 11, 11, 14, 14, 14));
  VoxelShape GROVE_STONE_TOP = VoxelUtil.multiOr(Block.box(3, 0, 4, 13, 3, 12), Block.box(3.5, 3, 4.5, 12.5, 6, 11.5), Block.box(4, 6, 5, 12, 8, 11), Block.box(5, 8, 6, 11, 10, 10), Block.box(6, 10, 7, 10, 11, 9));
  VoxelShape GROVE_STONE_MIDDLE = VoxelUtil.multiOr(Block.box(2.5, 0, 3.5, 13.5, 3, 12.5), Block.box(3, 4.9, 4, 13, 9.9, 12), Block.box(3, 9.9, 4, 6, 14.9, 12), Block.box(10, 9.9, 4, 13, 14.9, 12), Block.box(3, 14.9, 4, 13, 16, 12), Block.box(2.5, 3, 3.5, 13.5, 5, 12.5));
  VoxelShape GROVE_STONE_BOTTOM = VoxelUtil.multiOr(Block.box(0, 0, 0, 16, 4.5, 16), Block.box(2.5, 3, 3.5, 13.5, 16, 12.5));
  VoxelShape IMBUER = VoxelUtil.multiOr(Block.box(5, 0, 5, 11, 2, 11), Block.box(7, 0, 2, 9, 2, 4), Block.box(7, 2, 3, 9, 4, 5), Block.box(7, 4, 4, 9, 6, 6), Block.box(7, 4, 10, 9, 6, 12), Block.box(7, 2, 11, 9, 4, 13), Block.box(7, 0, 12, 9, 2, 14), Block.box(12, 0, 7, 14, 2, 9), Block.box(11, 2, 7, 13, 4, 9), Block.box(10, 4, 7, 12, 6, 9), Block.box(4, 4, 7, 6, 6, 9), Block.box(3, 2, 7, 5, 4, 9), Block.box(2, 0, 7, 4, 2, 9));
  VoxelShape INCENSE_PLATE = VoxelUtil.multiOr(Block.box(2, 9, 3, 3, 10, 13), Block.box(13, 9, 3, 14, 10, 13), Block.box(2, 9, 13, 14, 10, 14), Block.box(2, 9, 2, 14, 10, 3), Block.box(3, 8, 3, 13, 9, 13), Block.box(0, 9, 6, 1, 10, 10), Block.box(0, 9, 10, 2, 10, 11), Block.box(0, 9, 5, 2, 10, 6), Block.box(15, 9, 6, 16, 10, 10), Block.box(14, 9, 10, 16, 10, 11), Block.box(14, 9, 5, 16, 10, 6), Block.box(2, 0, 2, 7, 1, 7), Block.box(2, 0, 9, 7, 1, 14), Block.box(9, 0, 9, 14, 1, 14), Block.box(9, 0, 2, 14, 1, 7), Block.box(10, 1, 3, 13, 8, 6), Block.box(3, 1, 3, 6, 8, 6), Block.box(3, 1, 10, 6, 8, 13), Block.box(10, 1, 10, 13, 8, 13));
  VoxelShape MORTAR = VoxelUtil.multiOr(Block.box(6, 0, 6, 10, 2, 10), Block.box(6, 1, 10, 10, 7, 11), Block.box(6, 1, 5, 10, 7, 6), Block.box(5, 1, 6, 6, 7, 10), Block.box(10, 1, 6, 11, 7, 10));
  VoxelShape RUNIC_CRAFTER = VoxelUtil.multiOr(Block.box(5, 1, 5, 11, 3, 11), Block.box(1, 0, 1, 15, 1, 15), Block.box(6, 3, 6, 10, 9, 10), Block.box(6, 9, 6, 10, 12, 10), Block.box(13, 7, 7, 17, 10, 11), Block.box(9, 6, 0, 13, 9, 4), Block.box(3, 8, -1, 7, 11, 3), Block.box(5, 8, 13, 9, 11, 17), Block.box(-1, 7, 7, 3, 10, 11), Block.box(5, 12, 5, 11, 13, 11), Block.box(7, 13, 7, 9, 14, 9));
  VoxelShape UNENDING_BOWL = VoxelUtil.multiOr(Block.box(5, 0, 5, 11, 1, 11), Block.box(5, 0, 4, 11, 1, 5), Block.box(5, 0, 11, 11, 1, 12), Block.box(11, 0, 5, 12, 1, 11), Block.box(4, 0, 5, 5, 1, 11), Block.box(4, 1, 4, 5, 3, 5), Block.box(4, 1, 11, 5, 3, 12), Block.box(11, 1, 4, 12, 3, 5), Block.box(11, 1, 11, 12, 3, 12), Block.box(5, 1, 3, 11, 3, 4), Block.box(12, 1, 5, 13, 3, 11), Block.box(3, 1, 5, 4, 3, 11), Block.box(5, 1, 12, 11, 3, 13), Block.box(12, 3, 4, 13, 5, 5), Block.box(12, 3, 11, 13, 5, 12), Block.box(3, 3, 11, 4, 5, 12), Block.box(3, 3, 4, 4, 5, 5), Block.box(2, 3, 5, 3, 5, 11), Block.box(13, 3, 5, 14, 5, 11), Block.box(11, 3, 3, 12, 5, 4), Block.box(11, 3, 12, 12, 5, 13), Block.box(4, 3, 12, 5, 5, 13), Block.box(5, 3, 13, 11, 5, 14), Block.box(5, 3, 2, 11, 5, 3), Block.box(4, 3, 3, 5, 5, 4));
  VoxelShape PYRE = VoxelUtil.multiOr(Block.box(5.4999, -0.5, -3.5, 10.4999, 4.5, 1.5), Block.box(14.5, -0.5, 5.4998, 19.5, 4.5, 10.4998), Block.box(5.5002, -0.5, 14.5, 10.5002, 4.5, 19.5), Block.box(-3.5, -0.5, 5.5002, 1.5, 4.5, 10.5002), Block.box(4, 0, 4, 12, 8, 12), Block.box(-0.36382, 0, 12.3641, 3.63618, 3.75, 16.3641), Block.box(-0.3641, 0, -0.36382, 3.6359, 4, 3.63618), Block.box(12.36375, 0, -0.36417, 16.36375, 3.75, 3.63583), Block.box(12.36417, 0, 12.36375, 16.36417, 4, 16.36375), Block.box(6, 0, 0, 10, 4, 4), Block.box(0, 0, 6, 4, 4, 10), Block.box(12, 0, 6, 16, 4, 10), Block.box(6, 0, 12, 10, 4, 16), Block.box(6.5, 4, 12, 9.5, 7, 14), Block.box(12, 4, 6.5, 14, 7, 9.5), Block.box(11, 7, 6.5, 13, 10, 9.5), Block.box(3, 7, 6.5, 5, 10, 9.5), Block.box(2, 4, 6.5, 4, 7, 9.5), Block.box(6.5, 7, 11, 9.5, 10, 13), Block.box(6.5, 7, 3, 9.5, 10, 5), Block.box(6.5, 4, 2, 9.5, 7, 4));
}
